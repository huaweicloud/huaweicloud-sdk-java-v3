package com.huaweicloud.sdk.hss.v5.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;

/**
 * 处置镜像漏洞的请求信息
 */
public class HandleImageVulnerabilityRequestBody {

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "image_type")

    private String imageType;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "type")

    private String type;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "operate_type")

    private String operateType;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "handle_status")

    private String handleStatus;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "select_type")

    private String selectType;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "image_id_list")

    private List<String> imageIdList = null;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "vul_id_list")

    private List<String> vulIdList = null;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "vul_data_list")

    private List<HandleImageVulnerabilityRequestBodyVulDataList> vulDataList = null;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "image_data_list")

    private List<HandleImageVulnerabilityRequestBodyImageDataList> imageDataList = null;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty(value = "remark")

    private String remark;

    public HandleImageVulnerabilityRequestBody withImageType(String imageType) {
        this.imageType = imageType;
        return this;
    }

    /**
     * **参数解释**: 镜像类型 **约束限制**: 不涉及 **取值范围**: - local：本地镜像 - registry：仓库镜像 - cicd：cicd镜像  **默认取值**: 不涉及 
     * @return imageType
     */
    public String getImageType() {
        return imageType;
    }

    public void setImageType(String imageType) {
        this.imageType = imageType;
    }

    public HandleImageVulnerabilityRequestBody withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * **参数解释**: 漏洞类型 **约束限制**: 不涉及 **取值范围**: - linux_vul：Linux系统漏洞 - app_vul：应用漏洞  **默认取值**: 不涉及 
     * @return type
     */
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public HandleImageVulnerabilityRequestBody withOperateType(String operateType) {
        this.operateType = operateType;
        return this;
    }

    /**
     * **参数解释**: 对漏洞做的处置动作 **约束限制**: 不涉及 **取值范围**: - ignore：忽略 - not_ignore：取消忽略 - manual_repair：人工修复 - add_to_whitelist：加白  **默认取值**: 不涉及 
     * @return operateType
     */
    public String getOperateType() {
        return operateType;
    }

    public void setOperateType(String operateType) {
        this.operateType = operateType;
    }

    public HandleImageVulnerabilityRequestBody withHandleStatus(String handleStatus) {
        this.handleStatus = handleStatus;
        return this;
    }

    /**
     * **参数解释**: 需要处置的漏洞状态 **约束限制**: 不涉及 **取值范围**: - unhandled：待处理的漏洞 - handled：已处理的漏洞  **默认取值**: 不涉及 
     * @return handleStatus
     */
    public String getHandleStatus() {
        return handleStatus;
    }

    public void setHandleStatus(String handleStatus) {
        this.handleStatus = handleStatus;
    }

    public HandleImageVulnerabilityRequestBody withSelectType(String selectType) {
        this.selectType = selectType;
        return this;
    }

    /**
     * **参数解释**: 处置漏洞范围的类型 **约束限制**: 不涉及 **取值范围**: - all_vul：处置所有漏洞 - specific_image_all_vul：处置指定镜像的所有漏洞 - specific_vul_all_image：处置指定漏洞的全部镜像 - vul_view：通过漏洞维度指定需要处置的漏洞和镜像信息 - image_view：通过镜像维度指定需要处置的漏洞和镜像信息  **默认取值**: 不涉及 
     * @return selectType
     */
    public String getSelectType() {
        return selectType;
    }

    public void setSelectType(String selectType) {
        this.selectType = selectType;
    }

    public HandleImageVulnerabilityRequestBody withImageIdList(List<String> imageIdList) {
        this.imageIdList = imageIdList;
        return this;
    }

    public HandleImageVulnerabilityRequestBody addImageIdListItem(String imageIdListItem) {
        if (this.imageIdList == null) {
            this.imageIdList = new ArrayList<>();
        }
        this.imageIdList.add(imageIdListItem);
        return this;
    }

    public HandleImageVulnerabilityRequestBody withImageIdList(Consumer<List<String>> imageIdListSetter) {
        if (this.imageIdList == null) {
            this.imageIdList = new ArrayList<>();
        }
        imageIdListSetter.accept(this.imageIdList);
        return this;
    }

    /**
     * **参数解释**: select_type值为specific_image_all_vul时，该字段用于指定需要处置的镜像id列表 **约束限制**: 仅在select_type值为specific_image_all_vul时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @return imageIdList
     */
    public List<String> getImageIdList() {
        return imageIdList;
    }

    public void setImageIdList(List<String> imageIdList) {
        this.imageIdList = imageIdList;
    }

    public HandleImageVulnerabilityRequestBody withVulIdList(List<String> vulIdList) {
        this.vulIdList = vulIdList;
        return this;
    }

    public HandleImageVulnerabilityRequestBody addVulIdListItem(String vulIdListItem) {
        if (this.vulIdList == null) {
            this.vulIdList = new ArrayList<>();
        }
        this.vulIdList.add(vulIdListItem);
        return this;
    }

    public HandleImageVulnerabilityRequestBody withVulIdList(Consumer<List<String>> vulIdListSetter) {
        if (this.vulIdList == null) {
            this.vulIdList = new ArrayList<>();
        }
        vulIdListSetter.accept(this.vulIdList);
        return this;
    }

    /**
     * **参数解释**: select_type值为specific_vul_all_image时，该字段用于指定需要处置的漏洞id列表 **约束限制**: 仅在select_type值为specific_vul_all_image时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @return vulIdList
     */
    public List<String> getVulIdList() {
        return vulIdList;
    }

    public void setVulIdList(List<String> vulIdList) {
        this.vulIdList = vulIdList;
    }

    public HandleImageVulnerabilityRequestBody withVulDataList(
        List<HandleImageVulnerabilityRequestBodyVulDataList> vulDataList) {
        this.vulDataList = vulDataList;
        return this;
    }

    public HandleImageVulnerabilityRequestBody addVulDataListItem(
        HandleImageVulnerabilityRequestBodyVulDataList vulDataListItem) {
        if (this.vulDataList == null) {
            this.vulDataList = new ArrayList<>();
        }
        this.vulDataList.add(vulDataListItem);
        return this;
    }

    public HandleImageVulnerabilityRequestBody withVulDataList(
        Consumer<List<HandleImageVulnerabilityRequestBodyVulDataList>> vulDataListSetter) {
        if (this.vulDataList == null) {
            this.vulDataList = new ArrayList<>();
        }
        vulDataListSetter.accept(this.vulDataList);
        return this;
    }

    /**
     * **参数解释**: select_type值为vul_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为vul_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @return vulDataList
     */
    public List<HandleImageVulnerabilityRequestBodyVulDataList> getVulDataList() {
        return vulDataList;
    }

    public void setVulDataList(List<HandleImageVulnerabilityRequestBodyVulDataList> vulDataList) {
        this.vulDataList = vulDataList;
    }

    public HandleImageVulnerabilityRequestBody withImageDataList(
        List<HandleImageVulnerabilityRequestBodyImageDataList> imageDataList) {
        this.imageDataList = imageDataList;
        return this;
    }

    public HandleImageVulnerabilityRequestBody addImageDataListItem(
        HandleImageVulnerabilityRequestBodyImageDataList imageDataListItem) {
        if (this.imageDataList == null) {
            this.imageDataList = new ArrayList<>();
        }
        this.imageDataList.add(imageDataListItem);
        return this;
    }

    public HandleImageVulnerabilityRequestBody withImageDataList(
        Consumer<List<HandleImageVulnerabilityRequestBodyImageDataList>> imageDataListSetter) {
        if (this.imageDataList == null) {
            this.imageDataList = new ArrayList<>();
        }
        imageDataListSetter.accept(this.imageDataList);
        return this;
    }

    /**
     * **参数解释**: select_type值为image_view时，该字段用于指定需要处置的漏洞和镜像信息 **约束限制**: 仅在select_type值为image_view时该字段有效 **取值范围**: 不涉及 **默认取值**: 不涉及 
     * @return imageDataList
     */
    public List<HandleImageVulnerabilityRequestBodyImageDataList> getImageDataList() {
        return imageDataList;
    }

    public void setImageDataList(List<HandleImageVulnerabilityRequestBodyImageDataList> imageDataList) {
        this.imageDataList = imageDataList;
    }

    public HandleImageVulnerabilityRequestBody withRemark(String remark) {
        this.remark = remark;
        return this;
    }

    /**
     * **参数解释**: 处置操作的描述信息 **约束限制**: 不涉及 **取值范围**: 字符长度0-512位 **默认取值**: 不涉及 
     * @return remark
     */
    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        HandleImageVulnerabilityRequestBody that = (HandleImageVulnerabilityRequestBody) obj;
        return Objects.equals(this.imageType, that.imageType) && Objects.equals(this.type, that.type)
            && Objects.equals(this.operateType, that.operateType)
            && Objects.equals(this.handleStatus, that.handleStatus) && Objects.equals(this.selectType, that.selectType)
            && Objects.equals(this.imageIdList, that.imageIdList) && Objects.equals(this.vulIdList, that.vulIdList)
            && Objects.equals(this.vulDataList, that.vulDataList)
            && Objects.equals(this.imageDataList, that.imageDataList) && Objects.equals(this.remark, that.remark);
    }

    @Override
    public int hashCode() {
        return Objects.hash(imageType,
            type,
            operateType,
            handleStatus,
            selectType,
            imageIdList,
            vulIdList,
            vulDataList,
            imageDataList,
            remark);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HandleImageVulnerabilityRequestBody {\n");
        sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    operateType: ").append(toIndentedString(operateType)).append("\n");
        sb.append("    handleStatus: ").append(toIndentedString(handleStatus)).append("\n");
        sb.append("    selectType: ").append(toIndentedString(selectType)).append("\n");
        sb.append("    imageIdList: ").append(toIndentedString(imageIdList)).append("\n");
        sb.append("    vulIdList: ").append(toIndentedString(vulIdList)).append("\n");
        sb.append("    vulDataList: ").append(toIndentedString(vulDataList)).append("\n");
        sb.append("    imageDataList: ").append(toIndentedString(imageDataList)).append("\n");
        sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
